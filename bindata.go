// Code generated by go-bindata.
// sources:
// static/main.css
// static/main.js
// templates/index.html
// DO NOT EDIT!

package gaelv

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdb\x72\xa3\x38\x10\x7d\xb6\xbf\x42\x55\x53\x53\x33\x93\x1d\x25\x80\x6f\x09\xfe\x1a\x81\x1a\x50\x8d\x90\x58\xa9\x49\xec\x49\xed\xbf\x6f\x49\x08\x47\xc6\x56\x6a\xf7\x65\x8a\x5c\x00\xf5\x51\x9f\xee\x3e\xdd\xa2\x34\x5a\x23\x79\x5f\xaf\x28\xed\x79\x4d\xb1\x83\x1e\xe8\x60\x44\xcf\xcc\xb9\x24\x5f\x0a\xd8\x35\x90\x1f\xd7\xff\xac\xd7\x95\xe6\x67\xf2\xee\xee\x1e\x6b\xad\x90\x09\x05\x86\xbc\xaf\x09\x21\xa4\xd1\x0a\xa9\x15\xbf\xa1\x24\x79\x31\x9c\xbc\xf9\x23\xea\xb6\x95\x40\xe1\x34\x30\xc5\x29\x93\x32\x18\xf7\xcc\xb4\x42\x95\x64\x37\x9c\x48\x36\xfd\x9d\x00\x4a\x07\x63\xe0\xc1\x94\x0b\x3b\x48\x76\x2e\x89\xd2\x0a\x26\xa3\x94\x45\x25\x75\xfd\x6b\x32\xb1\xe7\xbe\xd2\x92\x46\xdb\xfd\x24\xf3\xcb\x08\xbe\x7a\x13\x1c\xbb\x92\xe4\x3b\xc7\x78\xd5\x81\x68\x3b\x2c\x49\x91\xf9\xc7\x99\x65\xe6\xaf\xdc\xbf\xbc\x72\x28\x94\x14\x0a\xe8\xa7\x7e\x4b\xd6\xa0\x4f\xd2\xca\x65\x0c\x14\x96\xe4\xdb\xb7\xe3\x7a\x35\x68\x2b\x50\x68\x55\x12\x56\x59\x2d\x47\x84\xe3\x85\x4e\x16\x71\x71\xf7\x95\x36\x1c\xcc\x94\x2e\xab\xa5\xe0\x04\x0d\x53\x76\x60\x06\x14\x5e\xd6\x69\xad\xa5\x36\x65\xbc\x96\xbc\x37\x6d\xc5\xbe\x67\x3f\x49\xf8\x79\xdc\xef\xb6\x3f\xa2\x88\x0f\xbe\x2e\xd9\x5c\x95\x45\xe2\xfe\x7c\x48\xf7\xe8\xfe\x97\x38\xd3\x21\x49\xdd\x52\x09\xaf\x30\x2b\x32\x38\xfa\xd2\x34\xcd\xf1\x46\xcf\x97\xca\x07\x56\x86\x71\x31\xda\x92\x6c\x16\xef\xe7\x4d\x00\x5c\xe4\x09\x99\x5c\x34\xb7\xbf\xd2\x5c\x78\x44\x38\x21\x65\x52\xb4\xaa\x24\x35\x28\x04\x73\x5c\xaf\x5e\xc1\xa0\xa8\x99\x9c\x17\x50\x0f\x51\x64\x9b\x44\x64\x94\x43\x35\xb6\x21\xbe\x8a\xd5\xbf\x5a\xa3\x47\xc5\x2f\x2c\x0f\x87\xc3\x12\x21\x54\xa3\x3f\x01\xec\xd9\x73\xc3\x96\x98\x37\x66\x94\x50\x9f\xf8\x69\x0e\x2f\x2f\xf9\x8d\x2b\x30\x46\x9b\x34\x08\x9e\x0f\x45\xbe\x5d\x82\x6a\x23\x7c\x22\xd2\x38\xbe\xd9\xee\x37\xc5\x07\x8e\x19\x60\x4e\xa9\xfa\x15\x4c\x23\xf5\x5b\x49\xd8\x88\x3a\x25\x56\xd4\x43\x49\xf2\xcd\xd4\xfe\x95\x46\xd4\xfd\x24\xd7\x50\xb3\x97\x97\xaf\x51\xe2\x9d\x2e\x16\x99\x7f\x15\xf0\xe6\xdc\x0d\x8c\x73\xa1\xda\x79\x76\x64\x37\xd3\x24\x2e\x96\x50\x10\x02\x7a\x7a\x20\xb3\x1e\x3c\x09\xf2\xf0\xe4\xcd\x0c\xfc\x3d\x82\x45\x6a\xc7\xde\x0d\xe5\xe5\xe0\xbb\x16\x98\x5b\xba\xab\x18\xb7\x70\x21\x56\x78\xee\xc5\x34\x7a\x17\xe4\x76\xf3\xfc\x9e\xfd\x3a\x9a\x02\xa1\x77\xa1\xdd\x2b\x96\xd7\xfb\xc7\x1e\x97\xb1\x7e\x8c\x33\x31\x9c\xa6\x85\xe9\x7f\xba\x41\xee\x39\xa6\x3d\x60\xa7\xe3\x91\xbd\x7d\xbe\xe9\x17\x09\x0d\x26\xe0\x16\x19\x8e\x36\x82\x17\xbb\x64\xbb\xdd\xdf\x40\xfc\x86\x08\xbe\xbb\x85\x1b\x57\xb7\x04\x5a\x32\x04\x55\x9f\xe3\x0d\xb2\xff\xb5\x81\x01\xab\x47\x53\x7b\x0a\x89\x5a\x35\x42\x22\x18\x2a\xd4\x30\x62\x7c\xb4\x65\xd9\xd7\xf8\x68\xdb\x5e\x57\x25\x0f\x15\x71\x42\xd8\x07\xd9\x9f\x5c\xb4\x7e\x35\xcc\xb5\x4a\xc7\xc7\x61\xb1\x90\x3d\x1b\x06\x3a\xeb\xd8\xde\x12\x9c\xa6\xe7\xd2\x30\x48\xf8\x4a\x8e\xd1\xaf\x07\x8c\x73\x9f\x4b\xe1\xb4\x8f\x67\x09\xd1\x67\x80\x14\x5e\x8d\x13\x43\xdf\xb8\xd3\x39\xe2\x22\x0a\x8a\x7c\x7a\xf8\x88\x60\xea\xe5\x85\x49\xe8\x2f\x29\x4a\x85\x1d\xad\x3b\x21\xf9\xf7\x42\xfd\x95\xfd\x48\x08\xdd\x9f\x0e\x77\x00\x79\x12\xc0\xdc\x35\x63\x3a\x37\x85\xd2\x5b\x37\x35\xbf\x4e\x14\x8a\x1e\x16\x5f\x4c\xa9\x9c\xf6\x60\x2d\x6b\x3f\xb7\xfe\x37\x00\x00\xff\xff\xf7\x89\x0b\xbc\xe8\x09\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 2536, mode: os.FileMode(420), modTime: time.Unix(1514540047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5b\x6b\xdb\x30\x14\x7e\xf7\xaf\x38\x74\x03\xc9\x4b\xaa\x24\xdd\x9e\x12\x52\xd8\x25\x65\xdd\xda\x0e\x96\x32\x18\xa3\x0f\xaa\x7d\xe2\x08\x64\xc9\x48\x72\x7a\x23\xff\x7d\x48\x76\x7c\x49\x96\xb5\x0f\x25\x3e\xfa\xce\xe5\xfb\xa4\xf3\x6d\xb8\x01\x5e\x14\x30\x07\x85\x0f\xf0\xab\x44\xfa\x12\x01\xa0\x9c\x02\x79\xc3\x8b\x82\x0c\x23\x80\x14\xa5\xc8\x85\x43\x63\xa7\xf0\x87\xbc\x7d\x21\x43\x20\x5b\x72\x17\x8e\xb8\xe3\x53\xf0\x29\x00\x2b\x21\x1d\x9a\x5b\x7c\x74\x53\x38\x39\x19\x86\x98\xd4\x99\x4f\xba\xab\xbe\x84\x5d\x3c\x16\x5c\xa5\x1f\xa5\x9c\xc2\x8a\x4b\x8b\x3e\xbe\xf5\xff\x1e\xb8\x4b\xd6\xbb\x4a\x7d\x5c\xa9\x12\x27\xb4\xa2\x1b\x2e\xe3\x1a\x00\x7e\x66\xe6\x8b\xb3\x95\x36\x0b\x9e\xac\x69\x03\x93\x3a\x6b\x61\x61\x02\x86\xa1\x1a\xa6\x30\x87\x0d\x97\xb3\xfa\x6c\x1b\x57\xbf\xb6\xcd\x10\x89\xce\x8b\xd2\x61\xda\x67\x84\xe9\x55\x60\xd1\x74\x68\xcb\x7b\xf5\x0c\xd6\xe2\xfd\xc4\x6c\xf1\x58\x50\xb7\x16\x96\xb5\x5a\xc4\xbb\x76\x06\x5d\x69\x14\x84\xe3\x6a\xf2\x80\x39\x3a\x78\x8d\xf7\xf3\x1b\xb4\xba\x34\x09\xb2\xdc\xab\x44\x0d\xc6\xc7\x39\xe4\xe8\xd6\x3a\xb5\x0d\x05\x6d\x72\xee\x6e\x45\x8e\x2d\x01\xa0\x4e\xe4\xd8\x67\x91\xd6\x24\xbe\x70\x87\xe1\x18\xde\xc1\x64\x3c\x1e\xef\x8f\x9f\xb2\x0c\xdd\x45\x29\xe5\x6f\xe4\x86\xc6\x30\x00\x72\x4a\x60\x00\x94\x8c\xc9\x80\x86\xd3\x6b\xad\xdc\x9a\xc6\x83\x49\x1c\x33\x2b\x45\x82\xf4\xf4\x6c\x0f\x18\x70\xa1\xd5\x3e\x06\x08\x0c\x1a\x09\x5a\xec\x57\x5d\x1a\x7b\x00\x9e\xf6\x0b\x5e\x0b\x55\x3a\x7c\x15\xb6\xc4\x44\xab\xf4\x10\xc6\xf6\x5a\xb7\x65\xa5\x14\xf6\x20\xe9\x7d\x57\xfa\x9d\xd0\x4b\xf1\xdc\x13\xda\x8a\xe7\x8e\xd0\x62\x55\x45\xe0\x1c\x26\xe3\xb3\x0f\xff\xb8\xed\x82\x1b\x8b\x97\xca\x55\xb0\x51\x0d\xf3\xba\x7c\xff\x44\x9a\x4b\x07\x94\x16\x0f\x93\x43\x8e\xc7\x76\xa0\xdd\x11\x25\x77\xa8\x92\xa7\xa5\x33\x9d\xc7\x5c\x07\x6f\x6c\xff\x3d\xd4\xe1\x6b\x0b\x73\x68\x20\x61\xa0\xf0\x37\xeb\x30\x6a\xa1\xe7\xd5\x93\xf9\x0f\xad\x16\x3b\xaa\xb1\x7e\x5e\xfb\x2a\xb5\xc3\x02\x55\x66\x6e\x8f\x50\xd5\xd9\x15\x6e\x50\xde\xea\xe5\x53\x7e\xaf\xbb\x36\x22\x7d\xbc\x9d\x71\xb7\x66\x3e\xca\x9c\xbe\xd2\x0f\x68\x3e\x73\x8b\x34\x66\xb6\xbc\xb7\xce\xd0\xf1\x10\x26\xfd\xbb\xbe\x97\xa5\xb9\x08\xdb\x7b\xa9\x8a\xd2\x75\x8a\x63\x97\x3c\x32\xc7\x4d\x86\x8e\x79\x3c\xed\x6d\x6a\xe4\x17\x37\xf2\x42\x57\x9b\x5d\x6f\xdf\x62\x83\xca\x2d\x43\x84\x92\x11\xfa\xaf\x91\xf7\x0a\x12\xcf\xa2\xda\x02\xb4\xca\xd1\x5a\x9e\xf9\x94\xfd\xb6\xe1\xe2\x74\x06\x73\xf8\xb6\xfc\x71\xc3\x82\x68\x14\x99\x37\xe9\xd0\x3d\xd1\xca\x6a\x89\xde\x7e\x82\xdb\xf8\x58\xb8\xc1\xd6\x79\xf6\xec\xd2\xdb\x6c\xc7\x8d\x2b\x0a\x8d\xf7\x96\xca\xae\xc5\xca\x35\xb5\xb6\xd1\x76\x16\xfd\x0d\x00\x00\xff\xff\x03\x10\x67\x58\x52\x06\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 1618, mode: os.FileMode(420), modTime: time.Unix(1514539718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6f\x8b\xdb\x36\x18\x7f\x9f\x4f\xa1\x8a\xc2\xf5\xd8\x64\xb7\x85\x31\x38\x1c\xd3\xd2\x75\x63\x10\xd8\xe0\x8e\xc1\x5e\x15\xc5\x7e\xe2\xe8\x22\x4b\x9a\x24\x3b\x71\x8f\x7c\xf7\x21\xc9\x72\xe4\x24\x47\xbb\x63\xaf\x12\x3d\x7f\x7e\xcf\xef\xf9\x67\xa9\x78\xf5\xcb\x1f\x9f\x1e\xfe\xfe\xf3\x33\xda\xda\x96\x97\x8b\x22\xfe\x00\xad\xcb\x05\x42\x85\x65\x96\x43\xf9\xdb\xc7\xcf\x68\x25\x1b\xf4\x17\x83\x3d\xe8\x22\x0f\x52\xa7\xe7\x4c\xec\x90\x06\xbe\xc4\xc6\x0e\x1c\xcc\x16\xc0\x62\xb4\xd5\xb0\x59\xe2\xad\xb5\xca\xdc\xe5\x79\x27\xd4\xae\xc9\x2a\xd9\xe6\x2d\xb5\xa0\x19\xe5\xa4\x92\xad\x92\x02\x84\x35\x64\x0f\xeb\x0f\x6f\xb3\xf7\x3f\x67\x6f\xf3\x9a\x19\xfb\x9c\x4d\x56\x19\x83\x7d\x48\x53\x69\xa6\x2c\xb2\x83\x82\x25\xb6\x70\xb0\xf9\x23\xed\x69\x90\x62\x64\x74\xf5\x7f\x47\x7e\x34\xb8\x2c\xf2\x10\x20\x65\xf0\x4c\xa8\xbe\x83\x0f\xef\xb3\x9f\xb2\x77\xef\x02\x6c\xdf\x41\xd6\x32\x71\x09\xe3\x6b\x17\x4a\x65\x2c\xb5\xac\xca\x5b\xca\x84\x4f\xf4\xa2\xa4\xe5\xa2\xc8\x43\x53\x8a\xb5\xac\x07\x54\x71\x6a\xcc\x12\xb7\x75\x45\xec\xa0\x64\xa3\xa9\xda\x0e\x78\xec\x1c\xe8\x99\x5e\x4a\xbe\xa6\x1a\x25\xff\x09\xd9\xb0\x03\xd4\xa1\x9e\x35\xeb\xaf\x98\x7f\xf9\xa2\xe5\xde\x1b\xb8\x84\xa1\xb2\x4c\x8a\xab\x66\x51\x77\x4d\x48\x08\xe5\xac\x11\xc4\x58\xaa\xed\x08\xe6\xe0\x14\xbd\x8e\xe5\xe7\x0a\x97\x0d\x05\xde\x23\x82\xce\xc7\xce\xf9\x8d\x8c\xf2\x31\x82\xcf\x20\xaf\x59\x1f\x0b\x04\xba\x5c\x2c\x0a\x57\x48\xc4\xea\x25\xa6\x4a\xe1\x2b\xa1\x42\xfe\x84\xd6\x8f\x9d\xb1\x17\x65\xa8\xa4\xb0\x94\x09\xd0\x31\x7f\x26\x54\x67\xa3\x76\xc3\xb8\x05\x4d\xbc\x0c\xa3\x9e\xb4\xb2\x76\xcd\x0a\xe2\x07\x38\x78\xa1\x14\x77\x3b\x18\x3a\x95\x81\xb0\xa0\x97\x78\xcd\x3b\xfd\xab\xb7\xf8\x3d\xf8\x29\x4e\x2b\xd8\x4a\x5e\x3b\x6d\xd0\xa0\x4e\x73\xb4\x1e\x90\x86\x06\x0e\x0a\x27\x13\x1e\x79\x24\x1c\xad\x6c\x1a\x0e\x04\x0e\x8a\x8a\x9a\x50\xce\x4f\xe5\x0d\x6c\x83\x77\xb5\x85\x6a\xb7\x96\x07\xec\xab\x91\x58\x9f\x88\x33\xf3\xd9\x8b\x3f\x3a\x8c\x82\xd3\x35\x70\xb4\x91\x7a\x66\x5d\x06\x13\x44\x39\x2f\x72\x6f\x12\xfb\xe0\x4b\x7f\x4e\x8e\xcb\x86\x50\x0d\xf4\xc4\xa9\xe3\x9e\x80\x53\x70\x26\xc0\xe0\xc4\xb4\x67\xb0\x9f\x2c\xfd\x5e\xa0\x9e\x78\x06\x5c\x36\x88\x09\x14\x4a\x0b\xf5\x4a\x36\x33\x47\x0f\x95\x78\x8e\x24\x7c\xf5\x2b\xce\xaa\x9d\xb7\xca\x42\x1e\x50\xa3\x25\x7a\x95\x9e\x67\x9e\x93\xef\x9a\x89\xfa\x6e\x8c\xf1\x84\x6e\xcc\xd0\xae\x25\x27\xd1\xe7\xe6\x0e\xa5\x10\x3f\x4e\x06\x42\xa6\x36\xb3\x38\xe8\xe8\x16\x7f\x2a\xd4\x2c\x5e\x9a\x0c\xf4\xe0\xfb\x92\x32\xb8\x99\x34\xe4\x06\xfd\xe0\x63\xfb\x53\x66\xe5\x4a\xee\x41\x7f\xa2\x06\xde\xdc\xe2\xf2\xf5\x13\x97\xcd\xca\x69\x1e\xe4\xbd\x67\xf4\x66\xb2\xbd\x3d\x7e\x23\xba\x86\x7f\x3a\x30\x96\x98\xae\x6d\xa9\x1e\x70\xe9\x37\xb4\x7c\xfd\xb4\x91\xba\xa5\xf6\x81\xb5\xe0\xd1\xfc\x1a\xbb\xd3\xed\x71\xbe\xc4\x11\xc0\x91\x65\x16\x5a\x74\x2e\x20\x2d\xd8\xad\xac\x47\x9e\x59\x38\x1d\xc7\x8d\xfe\x8f\x50\xee\x5b\xd9\x99\x08\x15\x4e\x2f\x85\x62\x5f\x01\x4f\x79\xde\xb3\xaf\x21\x4f\x0d\x46\x49\x61\xc0\x09\x6e\x5f\x08\xcd\xa9\x05\x51\x0d\x9e\x66\xf8\x7b\x6f\x75\xe8\x49\x38\x7e\x1f\x30\xd1\x60\x64\xa7\x2b\x88\xf9\xc6\xf3\xe4\x7d\xde\xda\x4b\x41\xc7\x23\x3a\x55\x8a\x24\x2b\x78\x3e\xec\x71\x60\x2f\x66\xfc\x1b\xc3\x3d\x1f\x2c\xce\xae\x85\xc3\x71\xa7\xa9\x52\xab\xb0\xd6\x0e\x26\x9c\xcc\x19\xc6\x4b\xd7\x23\xa0\x7d\xf7\x86\xa4\xe6\x71\x49\x66\xdd\x88\x09\x58\xd6\x26\x73\xe2\xf7\x61\xf4\xb5\x7e\x1b\xae\x75\x32\xfa\xb6\x60\x0c\x6d\xbc\xfb\xe8\x33\x4a\x8e\xe9\x85\x76\xea\x1e\x67\xf3\x6e\x76\x3c\xf9\x34\x26\xda\x93\x66\xea\xf8\x74\x11\xba\xeb\xcf\x5d\x83\xe9\x43\x25\x7d\x62\x3c\x1a\xfc\xcc\xfb\x29\x79\xa1\x14\xb9\x7b\x69\xf8\x7b\xd5\x3f\x0a\xff\x0d\x00\x00\xff\xff\x85\x4a\xc3\x2e\x2c\x0a\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2604, mode: os.FileMode(420), modTime: time.Unix(1514539910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

