// Code generated by go-bindata.
// sources:
// static/main.css
// static/main.js
// templates/index.html
// DO NOT EDIT!

package gaelv

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xe1\x72\xa3\x38\x0c\xfe\x9d\x3c\x85\x67\x76\x76\x76\xb7\xb7\x6e\x09\x09\x49\xeb\x3c\x8d\xc1\x02\x3c\x6b\x6c\xce\x16\x6d\xb2\x9d\x7b\xf7\x1b\x1b\x48\x1d\x12\xf7\xee\x7e\xdd\xd0\x26\x80\xf5\x59\xfa\xa4\x4f\x72\x98\x35\x06\xc9\xfb\x7a\x45\x69\x27\x2a\x8a\x2d\x74\x40\x7b\x2b\x3b\x6e\xcf\x8c\x7c\xc9\xa1\xa8\x61\x73\x5c\xff\xb5\x5e\x97\x46\x9c\xc9\xbb\xbf\x7b\xac\x8c\x46\x2e\x35\x58\xf2\xbe\x26\x84\x90\xda\x68\xa4\x4e\xfe\x06\x46\x36\x79\x7f\x0a\xe6\x8f\xda\x50\x38\xf5\x5c\x0b\x10\x93\x99\x90\xae\x57\xfc\xcc\x88\x36\x1a\x46\xa3\x94\x45\xa9\x4c\xf5\x6b\x34\x71\xe7\xae\x34\x8a\x46\xdb\xfd\x24\xf3\xcb\x08\xbe\x7a\x93\x02\x5b\x46\x36\x85\x0f\x60\xd5\x82\x6c\x5a\x64\x24\xcf\xc2\x63\xc7\x6d\x23\x35\x23\x59\xb8\x36\xe1\xe5\x95\x43\xa9\x95\xd4\x40\x3f\xf5\xcb\x78\x8d\x81\xf3\xca\x27\x00\x34\x32\xf2\xed\xdb\x71\xbd\xea\x8d\x93\x28\x8d\x66\x84\x97\xce\xa8\x01\xe1\x78\x09\x27\x8b\x62\xf1\xf7\xa5\xb1\x02\x2c\x23\x45\x7f\x22\xce\x28\x29\x08\x5a\xae\x5d\xcf\x2d\x68\xbc\xac\xd3\xca\x28\x63\x59\xbc\x96\xbc\xb7\x4d\xc9\xbf\x67\x3f\xc9\xf4\xf7\xb8\x2f\x76\x3f\x22\xc6\x87\xfe\x34\xb2\xbe\x62\xf5\xff\x51\xba\x17\xee\xbf\xe1\x99\xa6\xa4\x4c\x43\x15\xbc\x82\x9a\x44\x34\x39\xfa\x52\xd7\xf5\xf1\x46\x9e\x97\xca\x4f\x51\x59\x2e\xe4\xe0\x18\xd9\x2e\xde\xcf\x9b\x00\x78\xe6\x09\x99\x5c\x34\xb7\xbf\xd2\xdc\xf4\x88\x70\x42\xca\x95\x6c\x34\x23\x15\x68\x04\x7b\x5c\xaf\x5e\xc1\xa2\xac\xb8\x9a\x17\xd0\xf4\x11\xb3\x6d\x82\x19\x15\x50\x0e\xcd\xc4\xaf\xe4\xd5\xaf\xc6\x9a\x41\x8b\x4b\x94\x87\xc3\x61\x89\x90\xba\x36\x9f\x00\xf6\xfc\xb9\xe6\x4b\xcc\x1b\xb7\x5a\xea\x4f\xfc\xd4\x87\x97\x97\xcd\x8d\x2b\xb0\xd6\xd8\x34\x08\x9e\x0f\xf9\x66\xb7\x04\x55\x56\x86\x44\xa4\x71\x62\xbb\xdb\x6f\xf3\x0f\x1c\xb7\xc0\xbd\x52\xcd\x2b\xd8\x5a\x99\x37\x46\xf8\x80\x26\x25\x56\x34\xbd\x9f\x46\x63\xfb\x97\x06\xd1\x74\xa3\x5c\xa7\x9a\xbd\xbc\x7c\x8d\x12\xef\x75\xb1\xc8\xfc\xab\x84\x37\xef\xae\xe7\x42\x48\xdd\xcc\xb3\x23\xbb\x99\x26\x71\xb1\xa4\x86\x89\xd0\xd3\x03\x99\xf5\xb0\xf5\x41\x90\x87\xa7\x60\x66\xe1\xcf\x01\x1c\x52\x37\x74\x7e\xc6\x2e\x07\xdf\xb5\xc0\xfc\xd2\x5d\xc5\xf8\x85\x4b\x60\x79\x88\x3d\x7c\xde\x04\x57\xcc\xe3\x78\xf6\xeb\xc3\x94\x08\x9d\xa7\x76\xaf\x58\x41\xef\x1f\x7b\x14\x61\xef\x71\xa6\x7e\x64\xa2\x3f\x8d\x0b\xe3\x77\xba\x41\xee\x39\xa6\x1d\x60\x6b\xe2\x91\xbd\x7b\xbe\xe9\x17\x05\x35\x26\xe0\x0e\x39\x0e\x2e\x82\xe7\x45\xb2\xdd\xee\x6f\x20\x7f\x43\x04\x2f\x6e\xe1\xd6\xd7\x2d\x81\x56\x1c\x41\x57\xe7\x78\x83\xec\x3f\x6d\x60\xc1\x99\xc1\x56\x21\x84\x44\xad\x6a\xa9\x10\x2c\x95\xba\x1f\x30\x3e\xda\xb2\xec\x6b\x7c\xb4\xed\xae\xab\xb2\x99\x2a\xe2\x85\xb0\x9f\x64\x7f\xf2\x6c\xc3\xea\x34\xd7\x4a\x13\x1f\x87\xf9\x42\xf6\xbc\xef\xe9\xac\x63\x77\x1b\xe0\x38\x3d\x97\x86\x93\x84\xaf\xe4\x18\xfd\x07\xc0\x30\xf7\xb9\x92\x5e\xfb\x78\x56\x10\xfd\x0c\x50\x32\xa8\x71\x8c\x30\x34\xee\x78\x8e\x78\x46\x93\x22\x9f\x1e\x3e\x18\x8c\xbd\xbc\x30\x99\xfa\x4b\x49\xa6\xb1\xa5\x55\x2b\x95\xf8\x9e\xeb\x3f\xb2\x1f\x09\xa1\x87\xd3\xe1\x0e\x60\x93\x04\x70\x7f\xcd\x98\xd6\x4f\xa1\xf4\xd6\x75\x25\xae\x13\x85\xb2\x9b\x13\xf5\x4f\x39\xed\xc0\x39\xde\x7c\x6e\xfd\x77\x00\x00\x00\xff\xff\x62\xa6\xd9\xa0\xb7\x09\x00\x00")

func staticMainCssBytes() ([]byte, error) {
	return bindataRead(
		_staticMainCss,
		"static/main.css",
	)
}

func staticMainCss() (*asset, error) {
	bytes, err := staticMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.css", size: 2487, mode: os.FileMode(420), modTime: time.Unix(1513795572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfe\x14\x44\x9f\x07\x90\xbc\xa4\x4e\xd2\xed\x94\xa0\x3d\x6c\x6b\xb1\x6e\x6d\x07\x2c\xc5\x80\x61\xd8\x41\xb5\x19\x47\x80\x2c\x19\x12\xdd\xa6\x2d\xfc\xdd\x07\xc9\xae\x5f\x92\x6d\xed\xa1\x88\xa9\x1f\x29\xfe\x49\x91\xf7\xc2\x82\x28\x4b\x38\x05\x8d\x0f\xf0\xbd\x42\xfe\x1c\x01\xa0\x5a\x02\xfb\x4f\x94\x25\x9b\x46\x00\x19\x2a\x59\x48\x42\xeb\x96\xf0\x93\xfd\xff\xcc\xa6\xc0\x6a\xf6\x2b\x1c\x09\x12\x4b\xf0\x2e\x00\x1b\xa9\x08\xed\x2d\xee\x68\x09\x47\x47\xd3\x60\x53\x26\xf7\x4e\x81\xad\xfd\xbf\x07\x41\xe9\xb6\xf1\x08\xdf\xa9\x29\xca\x8a\x30\x1b\x07\xc1\xec\x2a\x38\x6e\x2a\x9d\x92\x34\x9a\xc7\xed\x31\x80\x4f\xd8\x62\x9b\xef\x37\xcc\xcf\x77\x25\xa7\xad\x74\x49\x7f\x7d\xbc\x6a\x59\x8b\x54\x59\x0d\xe1\xd8\x67\xd2\x32\xbc\x0b\xab\x4c\xde\x47\xee\x78\x65\xf2\xc4\xa2\x33\x95\x4d\x31\x29\x7c\xc2\xdc\x62\x17\xb4\x6e\x7f\xd5\x9d\xa6\x02\x69\x6b\x32\xd7\x49\x30\xb6\x10\x74\x2b\x0b\xec\x05\x00\x27\x59\xe0\x58\x45\xd6\x8a\xf8\x28\x08\xc3\x31\xbc\x81\xc5\x7c\x3e\xdf\x4f\x3f\x4b\x72\xa4\x8b\x4a\xa9\x1f\x28\x2c\x8f\x61\x02\xec\x98\xc1\x04\x38\x9b\xb3\x09\x0f\xa7\xd7\x46\xd3\x96\xc7\x93\x45\x1c\x27\x4e\xc9\x14\xf9\xf1\xc9\x1e\x18\xb8\x70\xd5\x3e\x03\x0c\x26\x5d\x09\x7a\xf6\x93\xa9\xac\x3b\x80\x97\xe3\x80\xd7\x52\x57\x84\xaf\x62\x6b\x4c\x8d\xce\x0e\xb1\x64\xef\xea\x3e\xac\x52\xd2\x1d\x38\xbd\x1d\x96\xfe\xa5\xd0\x6b\xf9\x34\x2a\xb4\x93\x4f\x83\x42\xcb\x4d\x63\x81\x33\x58\xcc\x4f\xde\xfd\xa1\xdb\xa5\xb0\x0e\x2f\x35\x35\xd8\xac\xc5\x7c\x5d\xbe\xbc\x67\x5d\xd3\x01\x95\xc3\x43\xe7\xe0\xe3\xd9\x01\x3a\x4c\x51\x09\x42\x9d\x3e\xae\xc9\x0e\x1e\x73\x6b\xbc\x71\xe3\xf7\xd0\x9a\xaf\x1d\x9c\x42\x87\x84\x84\xc2\xdf\x6a\xa0\xa8\x47\xcf\x9a\x27\xf3\x0f\x59\x3d\x3b\x6b\x59\x9f\xaf\x7b\x55\xda\x61\x80\xc6\xb3\x70\x7f\x91\x6a\xf2\x2b\xbc\x47\x75\x6b\xd6\x8f\xc5\x9d\x51\x43\xc1\xde\xde\xe7\xf8\x32\x66\xde\x9a\x90\xb9\x32\x0f\x68\x3f\x08\x87\x3c\x4e\x5c\x75\xe7\xc8\xf2\xf9\x14\x16\xe3\x5e\xdf\xa9\xca\x5e\x84\xe9\xbd\xd4\x65\x45\x83\xe0\x38\x14\x8f\x09\x09\x9b\x23\x25\x9e\xe7\xa3\x49\x8d\xfc\xe0\x46\xbe\xd0\xcd\x64\xb7\xd3\x77\x7e\x8f\x9a\xd6\xc1\xc2\xd9\x0c\xfd\xd7\xcc\xef\x0a\x16\xaf\xa2\x76\x05\x18\x5d\xa0\x73\x22\xf7\x2e\xfb\xd7\x86\xc6\x99\x1c\x4e\xe1\xf3\xfa\xeb\x4d\x12\x8a\xc6\x31\xf1\x7b\x31\xdc\x9e\x1a\xed\x8c\x42\xbf\x7e\xc2\xb6\xf1\xb6\xd0\xc1\x7e\xf3\xf8\x75\x83\xbb\x52\xe8\x0c\xfd\x4a\xd8\x08\xe5\xb0\x49\x5c\x94\x65\xb3\xb7\x2a\xed\xb6\x72\x43\x5d\x84\x3a\xaa\x57\xd1\xef\x00\x00\x00\xff\xff\x05\x6b\xd7\xe4\xbb\x05\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 1467, mode: os.FileMode(420), modTime: time.Unix(1513797185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5b\x8b\xdc\x36\x14\x7e\x9f\x5f\xa1\x88\xc0\x66\x69\x65\x27\x81\x52\x58\x3c\x26\x25\x4d\x4b\x61\xa0\x85\x5d\x0a\x7d\x0a\x1a\xfb\x8c\x47\xbb\xb2\xa4\x4a\xc7\x9e\x71\x96\xf9\xef\x45\x92\xed\xd5\x5c\x96\xa4\x4b\x9e\x66\xce\xed\x3b\x77\x1f\x15\xaf\x7e\xfd\xf3\xe3\xdd\x3f\x7f\x7d\x22\x5b\x6c\x65\xb9\x28\xa6\x1f\xe0\x75\xb9\x20\xa4\x40\x81\x12\xca\xdf\x7f\xf9\x44\x56\xba\x21\x7f\x0b\xd8\x81\x2d\xf2\xc8\xf5\x72\x29\xd4\x03\xb1\x20\x97\xd4\xe1\x20\xc1\x6d\x01\x90\x92\xad\x85\xcd\x92\x6e\x11\x8d\xbb\xc9\xf3\x4e\x99\x87\x26\xab\x74\x9b\xb7\x1c\xc1\x0a\x2e\x59\xa5\x5b\xa3\x15\x28\x74\x6c\x07\xeb\x0f\x6f\xb3\xf7\x3f\x67\x6f\xf3\x5a\x38\x7c\x4e\x27\xab\x9c\xa3\xc1\xa5\xab\xac\x30\x48\x70\x30\xb0\xa4\x08\x7b\xcc\xef\x79\xcf\x23\x97\x12\x67\xab\xef\xed\xf9\xde\xd1\xb2\xc8\xa3\x83\x34\x82\x67\x5c\xf5\x1d\x7c\x78\x9f\xfd\x94\xbd\x7b\x17\x61\xfb\x0e\xb2\x56\xa8\x73\x98\x50\xbb\x58\x2a\x87\x1c\x45\x95\xb7\x5c\xa8\x90\xe8\x59\x49\xcb\x45\x91\xc7\xa6\x14\x6b\x5d\x0f\xa4\x92\xdc\xb9\x25\x6d\xeb\x8a\xe1\x60\x74\x63\xb9\xd9\x0e\x74\xec\x1c\xd8\x23\xb9\xd6\x72\xcd\x2d\x49\xfe\x33\xb6\x11\x7b\xa8\x63\x3d\x6b\xd1\x5f\x50\xff\xfc\xd9\xea\x5d\x50\xf0\x09\x43\x85\x42\xab\x8b\x6a\x93\xec\x12\x93\x31\x2e\x45\xa3\x98\x43\x6e\x71\x04\xf3\x70\x86\x5f\xc6\x0a\x73\x45\xcb\x86\x83\xec\x09\x23\xa7\x63\xe7\xed\xc6\x88\xf2\xd1\x43\xc8\x20\xaf\x45\x3f\x15\x08\x6c\xb9\x58\x14\xbe\x90\x44\xd4\x4b\xca\x8d\xa1\x17\x5c\xc5\xfc\x19\xaf\xef\x3b\x87\x67\x65\xa8\xb4\x42\x2e\x14\xd8\x29\x7f\xa1\x4c\x87\x93\x74\x23\x24\x82\x65\x81\x47\x49\xcf\x5a\x5d\xfb\x66\x45\xf6\x1d\xec\x03\x53\xab\x9b\x07\x18\x3a\x93\x81\x42\xb0\x4b\xba\x96\x9d\xfd\x2d\x68\xfc\x11\xed\x8c\xe4\x15\x6c\xb5\xac\xbd\x34\x4a\x48\x67\x25\x59\x0f\xc4\x42\x03\x7b\x43\x93\x09\x9f\xe2\x48\x62\x94\xba\x61\xdc\x02\x7f\xaa\x6a\x27\x43\xc6\x5e\x20\x85\x02\x47\x13\xd5\x5e\xc0\x6e\xd6\x0c\xa3\x47\x7a\xb6\xd1\x36\x08\x89\x50\x24\x46\x0f\xf5\x4a\x37\x47\x86\x01\x2a\xb1\x1c\x83\x08\x09\x56\x52\x54\x0f\x41\x2b\x83\xbd\xe1\xaa\x86\x9a\x2c\xc9\xab\x94\x3e\xb2\x9c\x6d\xd7\x42\xd5\x37\xa3\x8f\x47\x72\xe5\x86\x76\xad\x25\x9b\x6c\xae\x6e\x48\x0a\xf1\xe3\xac\xa0\x74\xaa\x73\xe4\x87\x1c\xfc\x6e\x85\x31\x38\xf3\x97\x26\x03\x3d\x48\x7a\x12\xc1\xd5\x2c\x61\x57\xe4\x87\xe0\x3b\x50\x19\xea\x95\xde\x81\xfd\xc8\x1d\xbc\xb9\xa6\xe5\xeb\x47\xa9\x9b\x95\x97\xdc\xe9\xdb\x10\xd1\x9b\x59\xf7\xfa\xf0\x15\xef\x16\xfe\xed\xc0\x21\x73\x5d\xdb\x72\x3b\xd0\x32\x2c\x41\xf9\xfa\x71\xa3\x6d\xcb\xf1\x4e\xb4\x10\xd0\xc2\xa6\x78\xea\xfa\x70\xbc\x27\x13\x80\x0f\x56\x20\xb4\xe4\x94\xc1\x5a\xc0\xad\xae\xc7\x38\xb3\x48\x1d\xc6\xa5\xf9\x9f\x50\xfe\x73\xd4\xb9\x09\x2a\x52\x2f\x85\x12\x5f\x80\xce\x79\xde\x8a\x2f\x31\x4f\x0b\xce\x68\xe5\xc0\x33\xae\x5f\x08\x2d\x39\x82\xaa\x86\x10\x66\xfc\x7b\x8b\x36\xf6\x24\x92\xdf\x06\xcc\x2c\x38\xdd\xd9\x0a\xa6\x7c\x27\x7a\xb6\x3e\x6d\xed\x39\xa3\x93\x13\x3a\x37\x86\x25\x2b\x78\x3a\xec\xd3\xc0\x9e\xcd\xf8\x57\x86\xfb\x78\xb0\xa4\xb8\xe4\x8e\x4e\x3b\xcd\x8d\x59\xc5\xb5\xf6\x30\x91\x72\x27\x18\x2f\x5d\x8f\x88\xf6\xcd\x1b\x92\xaa\x4f\x4b\x72\xd4\x8d\x29\x01\x14\x6d\x32\x27\x61\x1f\x46\x5b\x0c\xdb\x70\xa9\x93\x93\x6d\x0b\xce\xf1\x26\x98\x8f\x36\x23\xe7\x90\xde\x8c\xa7\xee\x49\x71\xdc\xcd\x4e\x26\x9f\xc6\x44\xfa\x24\x99\x3b\x3e\xdf\x1a\x7f\x61\xfc\xa5\x49\xdf\x02\xe9\x15\xbf\x77\xf4\x99\x27\x4a\xf2\x08\x28\x72\x7f\xcc\xc3\xe9\x0a\xef\xae\xff\x02\x00\x00\xff\xff\xbe\x1a\x5a\x4d\x8f\x09\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 2447, mode: os.FileMode(420), modTime: time.Unix(1513784278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/main.css": staticMainCss,
	"static/main.js": staticMainJs,
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"main.css": &bintree{staticMainCss, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

